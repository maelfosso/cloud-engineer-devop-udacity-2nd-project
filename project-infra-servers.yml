Parameters:

# whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
  Environment:
    Description: The project I am working on
    Type: String
    Default: Udacity2ndProject

Resources:

  WebServerSecurityGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: 
        Fn::ImportValue:
          !Sub ${Environment}-VPC
      GroupDescription: Allow HTTP, SSH connection
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  ProfileWithRolesForOurServer:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - UdacityS3ReadOnlyEC2

  WebServerLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref ProfileWithRolesForOurServer
      ImageId: ami-090717c950a5c34d3 
      InstanceType: t2.medium
      SecurityGroups:
      - !Ref WebServerSecurityGrp
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      BlockDeviceMappings:
        - DeviceName: /dev/sdk
          Ebs:
            VolumeSize: 10

  WebServerAutoScallingGrp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
      - Fn::ImportValue:
          !Sub "${Environment}-PrivateSubnets"
      HealthCheckGracePeriod: 5
      LaunchConfigurationName: !Ref WebServerLaunchConfiguration
      MaxSize: 5
      MinSize: 3
      TargetGroupARNs: 
        - !Ref WebServerTargetGroup
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub ${Environment} AutoSGrp

  LBSecurityGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: 
        Fn::ImportValue:
          !Sub ${Environment}-VPC
      GroupDescription: Allow only HTTP on Load Balancer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  
  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Port: 80
      Protocol: HTTP
      VpcId: 
        Fn::ImportValue:
          !Sub ${Environment}-VPC

  LB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub ${Environment}-Public-Subnet-1
      - Fn::ImportValue: !Sub ${Environment}-Public-Subnet-2
      SecurityGroups:
      - !Ref LBSecurityGrp
    
  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebServerTargetGroup
      LoadBalancerArn: !Ref LB
      Port: 80
      Protocol: HTTP

  LBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebServerTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref LBListener
      Priority: 1

  # JumpBoxSecurityGrp:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     VpcId: !Ref VPC
  #     GroupDescription: Allow SSH to Jumpbox from my IP
  #     SecurityGroupEgress:
  #     - IpProtocol: tcp
  #       FromPort: 0
  #       ToPort: 65535
  #       CidrIp: 0.0.0.0/0
  #     SecurityGroupIngress:
  #     - IpProtocol: tcp
  #       FromPort: 22
  #       ToPort: 22
  #       CidrIp: 0.0.0.0/0
  #       #  !Ref MyIPCidr
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${Environment} JumpBox
 
  # JumpBox:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: ami-0747bdcabd34c712a
  #     InstanceType: t2.micro
  #     KeyName: jumpbox-key
  #     BlockDeviceMappings:
  #       - DeviceName: '/dev/sdk'
  #         Ebs:
  #           VolumeSize: 10
  #     SubnetId: !Ref PublicSubnet1
  #     SecurityGroupIds:
  #     - !Ref JumpBoxSecurityGrp
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${Environment} JumpBox

Outputs: 
# #Bonus points for useful outputs!
  LoadBalancerPublicURL:
    Description: The Public URL of the Load Balancer of 2nd Udacity Project
    Value: !Sub http://${LB.DNSName}
    Export:
      Name: !Sub ${Environment}-LB-URL
