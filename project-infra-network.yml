Parameters:
# whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
  Environment:
    Description: The project I am working on
    Type: String
    Default: Udacity2ndProject
  
  VpcCidr:
    Description: The Cidr of my VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1Cidr:
    Description: The Cidr of the Public Subnet 1
    Type: String
    Default: 10.0.0.0/24

  PrivateSubnet1Cidr:
    Description: The Cidr of the Private Subnet 1
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2Cidr:
    Description: The Cidr of the Public Subnet 1
    Type: String
    Default: 10.0.2.0/24
  
  PrivateSubnet2Cidr:
    Description: The Cidr of the Private Subnet 2
    Type: String
    Default: 10.0.3.0/24
  
  MyIPCidr:
    Description: My IP address
    Type: String
    Default: 154.72.167.48/32

Resources:
  #instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Environment

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${Environment}
        
  InternetGatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Subnet (AZ1)
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Subnet (AZ1)
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: ${Environment} PublicRouteTable

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
      
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Private Subnet (AZ2)
  
  NatGatewayEIP1:
    DependsOn: InternetGatewayAttachement
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Nat Gateway EIP1
  
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NatGatewayEIP1
          - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${Environment} NatGateway1
  
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: ${Environment} PrivateRouteTable 1

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway1
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0

  PrivateSubnet1RouteTable1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  
  NatGatewayEIP2:
    DependsOn: InternetGatewayAttachement
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Nat Gateway EIP2

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NatGatewayEIP2
          - AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${Environment} NatGateway2
  
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: ${Environment} PrivateRouteTable 2

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway2
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0

  PrivateSubnet2RouteTable2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

Outputs:

  VPC:
    Description: The VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${Environment}-VPC"

  PrivateSubnets:
    Description: All the private subnets
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: !Sub "${Environment}-PrivateSubnets"

  PublicSubnet1: 
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${Environment}-Public-Subnet-1"

  PublicSubnet2: 
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${Environment}-Public-Subnet-2"

  PublicSubnets:
    Description: All the public subnets
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub "${Environment}-PublicSubnets"

  